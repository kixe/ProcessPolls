<?php namespace ProcessWire;

/**
 * ProcessWire Process Polls
 *
 * This module provides a backend process for collecting data via a form (FormProcessor). The data is saved as pages according to the predefined template and parent.
 * 
 *
 * @author kixe (Christoph Thelen) note@qualyweb.com 2020-08-23
 * @copyright © 2020 Christoph Thelen
 * @license Licensed under GNU/GPL v3
 * @link http://qualyweb.com
 * 
 * made for ProcessWire 3.x by Ryan Cramer 
 * http://processwire.com
 *
 * @requires permission poll-view
 *
 * @version 1.2.4 2024-04-14
 *
 * changelog
 * @since 1.0.0 - init - 2020-08-23
 * @since 1.0.1 - anonymus and/or token based polls possible - 2020-09-12
 * @since 1.0.2 - added role 'poll-monitor' - 2022-02-03
 * @since 1.0.3 - added option to load tokens in table via ajax if many - 2022-02-05
 * @since 1.0.4 - create log entry on token manipulation error - 2022-02-07
 * @since 1.0.5 - controll permission via method - 2022-02-08
 * @since 1.0.6 - updated requirements - 2022-02-16
 * @since 1.0.7 - security update: token check via FormProcessor::validator(), safer SQL-Statements - 2022-02-18
 * @since 1.0.8 - fixed sanitizer bug - 2022-02-18
 * @since 1.0.9 - removed exceptions from FormProcessor::success hook, added log for processing errors - 2022-02-19
 * @since 1.1.0 - fixed bug: removed deprecated function in PHP >= 8.1 - 2022-02-22
 * @since 1.1.1 - added options for icons to be displayed in list - 2022-02-24
 * @since 1.1.2 - do not init (autoload) module if not installed, prevent SQL Error - 2022-02-24
 * @since 1.1.3 - added option to enable/disable display of PVC - 2022-03-02
 * @since 1.1.4 - fixed bug: InputfieldCheckbox::renderValue shows 'checked' if not checked - 2022-03-02
 * @since 1.1.5 - added option to reset a poll - 2022-03-22
 * @since 1.1.6 - fixed bug: set title and breadcrumb in participation screen before any return - 2022-04-01
 * @since 1.1.7 - added option for preview for roles poll-admin and poll-monitor, added confirm dialog (js) for token based polls - 2022-04-21
 * @since 1.1.8 - added option to hide in list for roles poll-monitor if not poll-admin and participation not granted - 2022-05-04
 * @since 1.1.9 - fixed bug: Error in Logfile after a session has been expired, re-login is initiated and GET-Param: token has been removed by ProcessLogin::determineAfterLoginUrl() - 2022-05-07
 * @since 1.2.0 - added language support for 'title' and 'summary' - 2023-06-15
 * @since 1.2.1 - fixed bug: language support for 'title' and 'summary' - 2023-06-21
 * @since 1.2.2 - switch submit / save label if poll is editable (backend only) - 2024-03-08
 * @since 1.2.3 - bug fix: hide poll in list for monitors if participation not granted OR poll is over AND hide_in_list checked - 2024-04-10
 * @since 1.2.4 - Update table process_poll_token made columns `pages_id`, `user_id` unique - 2024-04-14
 * 
 * @todo add function to generate emails with tokens and links to this poll (pull emails from selector)
 *
 */

class ProcessPolls extends Process {

	public static function getModuleInfo() {
		return array(
			'title' => __('Polls', __FILE__), // getModuleInfo title
			'summary' => __('This module provides a backend process for collecting data via a form (FormProcessor). The data is saved as pages according to the predefined template and parent.', __FILE__), // getModuleInfo summary
			'version' => 124, 
			'permanent' => false,
			'autoload' => 'template=admin',
			'permission' => 'poll-view',
			'permissionMethod' => 'checkAccess',
			'permissions' => array('poll-view' => 'Participate in a poll or election', 'poll-monitor' => 'View details of polls without editing rights', 'poll-admin' => 'Add, edit, delete polls'),
			'author' => 'kixe',
			'requires' => array('ProcessExportPagesCSV','FormProcessor','ProcessWire>=3.0.163'),
			'installs'  => array('ProcessExportPagesCSV','FormProcessor'),
  			'icon' => 'puzzle-piece'
		);
	}

	/**
	 * TOKEN_LENGTH alphanumeric (0-9, a-z, A-Z)
	 * 
	 * number of possible strings depending on length
	 * length 5: ≈         916.000.000 options
	 * length 6: ≈      56.800.000.000 options
	 * length 7: ≈   3.520.000.000.000 options
	 * length 8: ≈ 218.340.000.000.000 options
	 *
	 */
	const TOKEN_LENGTH = 6;

	const MAX_INVALID_ATTEMPTS = 8; // max number of attempts with invalid tokens by IP per day

	const MAX_NUM_TOKEN = 25; // max number of tokens load in table per request (initial, ajax) default 25 

	public $polls; // array of polls in the DB
	
	protected $isAdmin; // user has permission poll-admin

	protected $isMonitor; // user has permission poll-monitor

	public $form; // $form for specific poll generated by FormProcessor

	public $id = 0; // id of poll (container page)

	public function __construct() {
		wireLangEntityEncode(1);
		// ... nothing to do
	}

	/**
	 * Page and User based permission check. If the page where this process lives in has a field 'access' of type Selector the current user will be checked against this selector
	 *
	 * @param Array $data receives array with: wire (PW instance), user (User), page (Page)
	 * @return bool
	 * 
	 */
	public static function checkAccess($data = array()) {
		$user = $data['user'];
		if ($user->isSuperuser()) return true;
		if ($user->hasPermission('poll-monitor') || $user->hasPermission('poll-admin')) return true;
		$page = $data['page'];
		$wire = $data['wire'];
		if (!$page->hasField('access') || empty($page->access)) return true;
		$field = $wire->fields->get('access');
		if ($field->type != 'FieldtypeSelector') {
			throw new WireException("Invalid field type ($field->type) for field: 'access'. Expected 'FieldtypeSelector'");
		}
		$initValue = trim($field->get('initValue'),', ');
		if (trim($page->access,', ') == $initValue) return true;
		$allowedUserIDs =  $wire->pages->findIDs(trim($page->access,', ') . ",check_access=0", ['allowCustom' => true]);
		if (!in_array($user->id, $allowedUserIDs)) return false;
		return true;
	}

	/**
	 * init and add hooks
	 *
	 */
	public function init() {
		if (wire('modules')->isInstalled($this->className()) === false) return false;
		parent::init(); // load js, css
		$dateFormat = $this->_('%Y-%m-%d');
		wire('config')->scripts->add($this->config->urls('JqueryCore') . 'jquery.cookie.min.js');
		wire('config')->scripts->add($this->config->urls('ProcessPolls') . 'ProcessPolls.js');
		$this->polls = $this->getDataArray("SELECT *, UNIX_TIMESTAMP(start) AS tsStart, DATE_FORMAT(start, '$dateFormat') AS dateStart, UNIX_TIMESTAMP(`end`) AS tsEnd, DATE_FORMAT(`end`, '$dateFormat') AS dateEnd FROM process_poll", 'pages_id');
		$this->isAdmin = wire('user')->hasPermission('poll-admin')? true : false;
		$this->isMonitor = wire('user')->hasPermission('poll-monitor')? true : false;

		$getID = (int) $this->input->get('id');
		$postID = (int) $this->input->post('id');
		$this->id = abs($postID ? $postID : $getID);
		$data = !empty($this->polls[$this->id])? $this->polls[$this->id] : null;

		wire()->addHookAfter('InputfieldForm::processInput', function($e) {
			$form = $e->object;
			if ($form->name != 'config_process_poll') return;
			$input = $e->arguments[0];
			if($input->save_poll) {
				if (strtotime($input->start) == strtotime($input->end)) {
					$e->object->end->error($this->_('The poll / election must be active for at least one day.'));
				}
				else if (strtotime($input->start) > strtotime($input->end)) {
					$e->object->start->error($this->_('The start date must be before the end date.'));
				}
			}
		});

		wire()->addHookBefore('InputfieldCheckbox::renderValue', function($e) use ($data) {
			if (!$e->object->checked) $e->object->val('');
		});

		// compose name
		// id of poll + date + ID of user in the instance where this process lives in
		if ($this->id) {
			wire()->addHookAfter('FormProcessor::name', function($e) {											
				$e->return = $this->id . '-' . date('Ymd') . '-';
				// add user id
				$e->return .= $e->object->anonymus? '40' : wire('user')->id;
				// add counter
				$e->return .= '-1';
			});
		}

		// if it is a backend process and and user is logged in and a conditions of participation page is provided, then add a confirmation checkbox so that the user can agree to the conditions of participation.
		if (!empty($data['cop_id']) && wire('page')->rootParent->id == 2 && wire('user')->isLoggedin()) {

			wire()->addHookBefore('Inputfield::render', function($e) {
				if ($e->object->name == 'ccop') {
					$e->object->set('collapsed', 9);
					$e->object->set('entityEncodeLabel', false);
				}
			});

			wire()->addHookAfter('FormProcessor::buildForm', function($e) use ($data) {
				$e->return->attr('id',"InputfieldFormPoll");
				$f = $this->modules->get('InputfieldCheckbox');
				$f->attr('id+name', 'ccop'); 
				$f->attr('value', $this->id);
				$f->attr('data-user-id', wire('user')->id);
				$copPage = wire('pages')->get($data['cop_id']);
				$copTargetLabel = __('conditions of participation');
				$copTarget = strpos($copPage->url, '?')? "$copPage->url&amp;modal=1" : "$copPage->url?modal=1";
				$copLinkMarkup = "<span><a class='pw-modal' href='$copTarget'>$copTargetLabel</a></span>";
				$f->attr('data-label-confirmed', sprintf(__('I confirmed the %2$s for this poll / election on this device on %1$s.'), '{date}', $copLinkMarkup));
				$f->required = true;
				$f->label = sprintf(__('I agree to the %1$s.'), $copLinkMarkup);

				// $f->set('textFormat', 8);
				// $f->set('entityEncodeText', false);
				// $f->collapsed = Inputfield::collapsedNever;
				// $f->entityEncodeLabel = Inputfield::textFormatMarkdown;
        		// $f->entityEncodeText = Inputfield::textFormatMarkdown;
        		// $f->textFormat = Inputfield::textFormatMarkdown;
				$e->return->insertBefore($f, $e->return->get('submit'));
				$e->return->get('submit')->attr('data-title-disabled', __('Please confirm the conditions of participation first.'));
			});
		}

		/**
		 * validate form after submit
		 * ErrorCodes
		 * 1: Missing var $data
		 * 2: Missing var $data[require_token]
		 * 3: Missing var $_GET[token]
		 * 4: Missing var $_POST[token]
		 * 5: var $_POST[token] does not match var $_GET[token]
		 * 6: Invalid token
		 * 7: Token does not belong to current user
		 * 
		 */
		wire()->addHookAfter('FormProcessor::validator', function($e) use ($data) {

			// preview / sandbox mode
			if (!empty(wire('input')->get->preview) || $e->object->sandbox === true) {
				$this->warning( __('Sandbox mode. Submitting the form has no effect.'));
				$e->return = false;
				return;
			}

			$errors = [];

			// is this poll token based?
			if (empty($data)) $errors[] = 1;
			else if (!isset($data['require_token'])) $errors[] = 2;
			else if ($data['require_token'] === '0') return;

			$token_by_post = wire('sanitizer')->alphanumeric($e->object->hiddenFields['token'],false,16);
			$token_by_get = wire('sanitizer')->alphanumeric(wire('input')->get->token,false,16);

			if (empty($token_by_get)) $errors[] = 3;
			if (empty($token_by_post)) $errors[] = 4;
			if ($token_by_post !== $token_by_get) $errors[] = 5;

			$userID = $this->isValidToken($token_by_post);
			if ($userID === false) $errors[] = 6;			
			if ($userID != wire('user')->id) $errors[] = 7;

			if (!empty($errors)) {
				$errors = implode(', ', $errors);
				$this->error( __("Processing Error") . " [$errors]");
				wire('log')->save('polls-error', "Hook in FormProcessor::validator failed: [$errors].");
				$e->return = false;				
			}
		});

		// invalidate the used token from the database when the form has been processed successfully
		// and a new page has been saved
		wire()->addHookAfter('FormProcessor::success', function($e) use ($data) {

			$errors = [];
			$vote = wire('pages')->get($e->arguments[0]);

			// is this poll token based?
			if (empty($data)) $errors[] = 1;
			else if (!isset($data['require_token'])) $errors[] = 2;
			else if ($data['require_token'] === '0') return;

			$token_by_post = wire('sanitizer')->alphanumeric($e->object->hiddenFields['token'],false,16);
			$token_by_get = wire('sanitizer')->alphanumeric(wire('input')->get->token,false,16);

			if (empty($token_by_get)) $errors[] = 3;
			if (empty($token_by_post)) $errors[] = 4;
			if ($token_by_post !== $token_by_get) $errors[] = 5;

			$userID = $this->isValidToken($token_by_post);
			if ($userID === false) $errors[] = 6;			
			if ($userID != wire('user')->id) $errors[] = 7;

			if (!empty($errors)) {
				$errors = implode(', ', $errors);
				$this->error( __("Processing Error") . " [$errors]");
				wire('log')->save('polls-error', "Hook in FormProcessor::success failed [$errors]. Unable to invalidate token: $token_by_post. Page [#$vote->id] has been created.");			
			}
			else if (!$this->invalidateToken($token_by_post)) {
				$this->error( __("Processing Error") . " [8]");
				wire('log')->save('polls-error', "Hook in FormProcessor::success failed. Unable to invalidate token: $token_by_post. Page [#$vote->id] has been created.");
			} else {
				$message = __("Your opinion / vote has been submitted successfully!");
				if ($data['show_pvc'] === '1' && $data['require_token'] === '1' && $data['anonymus'] === '1') {
					$message .= " PVC-$vote->id-$vote->created-$token_by_post";
				}
				// for debugging purposes
				if (wire('config')->ProcessPollsLogPVC === true && $data['require_token'] === '1' && $data['anonymus'] === '1') {
					wire('log')->save("poll-$this->id", "PVC-$vote->id-$vote->created-$token_by_post");
				}
				$this->message($message);	
			}
		});

		// remove poll from DB if Parent page has been trashed
		wire()->addHookBefore('Pages::trash', function($e) {
			$page = $e->arguments[0];
			if (empty($this->polls[$page->id])) return;
			$this->save();
		});

		$this->form = new FormProcessor();
		$this->form->init();
		if (!empty($data) && $data['require_token'] === '1') {
			$this->form->confirmText = __('Are you sure you want to submit the form? Changes to your entries are then no longer possible!');
		}
	}
	
	/**
	 * default output
	 * @return string rendered list of polls
	 *
	 */
	public function ___execute() {
		return $this->renderList();
	}

	/**
	 * Called when the URL is this module's page URL + "/export/"
	 * add poll
	 * @requires permission poll-admin & export-csv
	 *
	 */
	public function executeExport() {
		if (!$this->isAdmin && (!$this->isMonitor || !wire('user')->hasPermission('export-csv'))) {
			throw new ProcessControllerPermissionException($this->_('Permission to export polls / elections not granted'));
		}
		if (!wire('modules')->isInstalled('ProcessExportPagesCSV')) {
			throw new WireException($this->_('Required Module ProcessExportPagesCSV is not installed.'));
		}
		if (!$this->id) throw new WireException($this->_('Missing GET parameter: ID'));
		else {
			$parent = wire('pages')->get('id= ' . (int) $this->id . ',parent=' . $this->getProcessPage() . ',include=all');
			if($parent instanceof NullPage) {
				throw new WireException($this->_("The requested poll / election does not exist in page tree.")); 
				return false;
			}
			if (!array_key_exists($parent->id, $this->polls)) {
				throw new WireException($this->_('The requested poll / election does not exist in the table "process_poll".'));
				return false;			
			}
		}
		$data = $this->polls[$this->id];

		// export allowed for non superusers only after poll / election has been terminated
		// check date range
		if(!$this->isAdmin && $data['tsStart'] > time()) {
			throw new WireException(sprintf($this->_('This poll / election has not started yet. The results can only be exported after the poll / election has been terminated on %s.'), $data['dateEnd']));
		}
		else if (!$this->isAdmin && $data['tsEnd'] > time()) {
			throw new WireException(sprintf($this->_('This poll / election is active and ends on %s (00:00). The results can only be exported after the poll / election has been terminated.'), $data['dateEnd']));
		} 

		$exportCSV = wire('modules')->get('ProcessExportPagesCSV');
		$this->headline($this->_("Export Poll or Election"));
		$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->_('Polls & Elections')));
		$exportCSV->export_selector_init = "include=all,parent=$this->id,template=$data[template]";
		// $exportCSV->exportSelectorFields = ['poll_test_radio_1']; // if enabled only these
		// $exportColumns = ['ID' => 'id','NAME' => 'name', 'DATETIME' => 'created'];
		$exportColumns = [$this->_('DATETIME (created)') => 'createdStr'];
		foreach (wire('templates')->get($data['template'])->fields as $f) {	
			if (strpos($f->type->name, 'FieldtypeFieldset') === 0) continue;
			if (in_array($f->name, ['title','page_icon'])) continue;
			$f = $f->getContext($data['template']);
			$f = wire('templates')->get($data['template'])->fieldgroup->getField($f, true);
			$key = 'label|name';
			if (!wire('user')->language->isDefault()) $key = 'label' . wire('user')->language->id . '|label|name';
			$exportColumns[$f->get($key)] = $f->name;
		}
		$exportCSV->exportColumns = $exportColumns;
		return $exportCSV->render();
	}

	/**
	 * get rows (markup) of tokens (ajax only)
	 * to append to token list if many
	 * @requires ajax request
	 * @return json array
	 * 
	 */
	public function executeTokens() {
		if (!wire('config')->ajax) wire('session')->redirect('../');
		if (!$this->id) throw new WireException($this->_('Missing GET parameter: ID'));
		$limit = !empty(wire('input')->post->limit)? wire('input')->post->limit : self::MAX_NUM_TOKEN;
		$offset = !empty(wire('input')->post->offset)? wire('input')->post->offset : 0;
		$data = $this->getTokens($this->id, $limit, $offset);
		$rows = $this->buildTokenTable($data, true);
		$next = $offset + count($data);
		$numTokens = $this->getNumTokens($this->id);
		echo json_encode(['total' => $numTokens['total'], 'next' => $next, 'rows' => $rows]);
		die();
	}

	/**
	 * Called when the URL is this module's page URL + "/add/"
	 * add poll
	 * @requires permission poll-admin
	 *
	 */
	public function executeAdd() {
		if (!$this->isAdmin) {
			throw new ProcessControllerPermissionException($this->_('Permission to add polls / elections not granted'));
		}
		$this->headline($this->_("Add Poll or Election"));
		$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->_('Polls & Elections')));

		$form = $this->buildForm();
		if(!$this->input->post->save_poll) return $form->render();
		else $this->save($form, false);
		wire('session')->redirect('../');
	}

	/**
	 * Called when the URL is this module's page URL + "/edit/?id=1"
	 * edit a specific poll
	 * @requires permission poll-admin
	 *
	 */
	public function executeEdit() {
		if (!$this->isAdmin && !$this->isMonitor) {
			throw new ProcessControllerPermissionException($this->_('Permission to edit or monitor polls / elections not granted'));
		}
		if (!$this->id) throw new WireException($this->_('Missing GET parameter: ID'));
		else {
			$parent = wire('pages')->get('id= ' . (int) $this->id . ',parent=' . $this->getProcessPage() . ',include=all');
			if($parent instanceof NullPage) {
				throw new WireException($this->_("The requested poll / election does not exist in page tree.")); 
				return false;
			}
			if (!array_key_exists($parent->id, $this->polls)) {
				throw new WireException($this->_('The requested poll / election does not exist in the table "process_poll".'));
				return false;			
			}
		}
		$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->_('Polls & Elections')));

		if (!empty(wire('input')->get->createTokens)) {
			$num = (int) wire('input')->get->createTokens;
			$tokens = $this->createTokens($this->id, null, $num);
			wire('session')->redirect("./?id=$this->id");
		}

		if (!empty(wire('input')->get->resetPoll)) {
			$tokens = $this->deleteTokens(true);
			$pollChildren = wire('pages')->find("include=all,parent=$this->id");
			$count = 0;
			foreach ($pollChildren as $child) {
				if ($child->delete(true)) $count++;
			}
			$this->message(sprintf($this->_('Successfully deleted %1$d opinions / votes.'), $count));
			wire('session')->redirect("./?id=$this->id");
		}


		$form = $this->buildForm($this->id);
		if($this->input->post->save_poll) {
			$form = $this->save($form, true);
			$this->polls = $this->getDataArray("SELECT * FROM process_poll", 'pages_id');
		}
		$data = $this->polls[$this->id];

		// title
		$title = $data['title'];
		if ($this->wire('languages') && strpos($data['title'], '{"') === 0) {		
			$langValues = json_decode($data['title'], true);
			$title = $langValues[$this->wire('user')->language->id];
			// fallback to default
			if(!strlen($title)) $title = $langValues[$this->wire('languages')->getDefault()->id];
		}

		$this->headline(sprintf("poll-%d: %s", $this->id, "\"$title\""));

		return $form->render();
	}

	/**
	 * Called when the URL is this module's page URL + "/delete/?id=1"
	 * delete a specific poll
	 * @requires permission poll-admin
	 *
	 */
	public function executeDelete() {
		if (!$this->isAdmin) {
			throw new ProcessControllerPermissionException($this->_('Permission to delete polls / elections not granted'));
		}
		if (!$this->id) throw new WireException($this->_('Missing GET parameter: ID'));
		else {
			$parent = wire('pages')->get('id= ' . (int) $this->id . ',parent=' . $this->getProcessPage() . ',include=all');
			if($parent instanceof NullPage) {
				throw new WireException($this->_("The requested poll / election does not exist in page tree.")); 
			}
			if (!array_key_exists($parent->id, $this->polls)) {
				throw new WireException($this->_('The requested poll / election does not exist in the database table "process_poll"'));
			}
		}

		if (wire('input')->post->submit_delete) {
			$this->save();
			wire('session')->redirect('../');
		}
		if (empty($this->polls[$this->id])) {
			throw new WireException($this->_('Missing GET parameter: ID'));
		}
		$data = $this->polls[$this->id];

		// title
		$title = $data['title'];
		if ($this->wire('languages') && strpos($data['title'], '{"') === 0) {		
			$langValues = json_decode($data['title'], true);
			$title = $langValues[$this->wire('user')->language->id];
			// fallback to default
			if(!strlen($title)) $title = $langValues[$this->wire('languages')->getDefault()->id];
		}

		$this->headline(sprintf($this->_("Delete poll-%d: %s"), $this->id, "\"$title\""));
		$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->_('Polls & Elections')));

		$form = $this->modules->get('InputfieldForm');
		$form->attr('id+name','DeletePoll');
		$form->action = "./?id=$this->id";
		
		$id = $this->className() . 'Delete';
		$deleteLabel = $this->_('Delete'); // Tab Label: Delete
		$form->attr('id', $id); 
		$form->attr('title', $deleteLabel); 

		$field = $this->modules->get('InputfieldCheckbox');
		$field->attr('id+name', 'id'); 
		$field->attr('value', $this->id); 
		$field->required = true;
		$field->icon = 'trash-o';
		$field->label = $deleteLabel;
		$field->description = $this->_('Check the box to confirm that you want to do this.');
		$field->label2 = $this->_('Confirm'); 
		$form->append($field); 

		$field = $this->modules->get('InputfieldSubmit');
		$field->attr('id+name', 'submit_delete'); 
		$field->value = $deleteLabel;
		$form->append($field);

		return $form->render();
	}

	/**
	 * Called when the URL is this module's page URL + "/participate/?id=1"
	 * participate in a poll
	 * @requires permission poll-view
	 *
	 */
	public function ___executeParticipate() {
		if (!$this->id) throw new WireException($this->_('Missing GET parameter: id'));
		else {
			$parent = wire('pages')->get('id= ' . (int) $this->id . ',parent=' . $this->getProcessPage() . ',include=all');
			if($parent instanceof NullPage) {
				throw new WireException($this->_("The requested poll / election does not exist in page tree.")); 
			}
			if (!array_key_exists($parent->id, $this->polls)) {
				throw new WireException($this->_('The requested poll / election does not exist in the database table "process_poll"'));
			}
		}

		$data = $this->polls[$this->id];
		$userID = wire('user')->id;

		// add headline & breadcrumb (backend process only)
		if (wire('config')->admin) {
			$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->_('Polls & Elections')));

			// title
			$title = $data['title'];
			if ($this->wire('languages') && strpos($data['title'], '{"') === 0) {		
				$langValues = json_decode($data['title'], true);
				$title = $langValues[$this->wire('user')->language->id];
				// fallback to default
				if(!strlen($title)) $title = $langValues[$this->wire('languages')->getDefault()->id];
			}

			$this->headline($title);
		}

		// create form
		$template = wire('templates')->get($data['template']);
		if (!$template) throw new WireException($this->_('Template could not be loaded'));

		$this->form->template = $template;
		$this->form->parent = $parent;

		/**
		 * statusSystemID = 8 – Non-deleteable and locked ID (status neither removeable via API nor in PW-Backend)
		 * statusSystem = 16 – Non-deleteable and locked ID, name, template, parent (status neither removeable via API nor in PW-Backend)
		 * must be removed/ edited manually directly in in DB
		 */
		// $this->form->status = 1 + 4 + 8 + 16 + 2048;
		// $this->form->status = 1 + 4 + 2048; // active + locked + unpublished (deletable only manually one-by-one or via API)
		$this->form->status = 1 + 2048; // active +  unpublished
		$this->form->submitValue = $this->_('Submit'); // default button label for save / submit

		// editable?
		if (!empty($data['selector']) && !$data['require_token'] && !$data['anonymus']) {
			$this->form->submitValue = $this->_('Save'); 
			$this->form->showSubmitInHeader = true;
		}

		// display preview form see below
		if (($this->isAdmin || $this->isMonitor) && !empty(wire('input')->get->preview)) {
			$this->form->successMessage = '';
			// form not processed in FormProcessor
			$this->form->sandbox = true;
			// show blank form
			return $this->form->render();
		}

		// $this->form->resetValue = $this->_('Reset'); 
		// $this->form->showResetInHeader = true;


		// check access (backend process only)
		if (wire('config')->admin && !empty($data['selector'])) {
			$allowedUsers = wire('users')->findIDs($data['selector']);
			if (!in_array($userID, $allowedUsers)) throw new ProcessControllerPermissionException($this->_('Permission to participate in poll / election not granted.'));
		}

		// check date range
		if($data['tsStart'] > time()) {
			return sprintf($this->_('This poll / election has not started yet. Participation is possible from %1$s (00:00) to %2$s (00:00).'), $data['dateStart'], $data['dateEnd']);
		}
		if($data['tsEnd'] < time()) {
			return sprintf($this->_('This poll / election ended on %s (00:00). Participation is no longer possible.'), $data['dateEnd']);
		}

		$info = [];
		if ($data['require_token']) {
			$info[] = $this->_("The token used has been invalidated. No further participation with the same token is possible.");
			if ($data['anonymus']) {
				$info[] = $this->_("Your vote has been saved anonymously.");
			}
		}

		else if ($data['anonymus']) $info[] = $this->_("Good bye!");
		else $info[] = sprintf($this->_("This poll / election ends on %s (00:00). You can make changes to your entries up to this date. Reload the page or use the browser's 'Back' button to return to the input form."), $data['dateEnd']);
		$info = implode(' ', $info);

		$this->form->successMessage = sprintf($this->_('Thank you for taking part in "%1$s". %2$s'), $title, $info);

		// token required?
		if ($data['require_token']) {
			// URL manipulation
			if (empty($this->input->get('login')) && empty($this->input->get('token'))) throw new WireException($this->_('Missing GET parameter: token'));
			else if (empty($this->input->get('token'))) {
				// can happen after session has been expired and re-login is initiated
				// GET-Param: token will be removed by ProcessLogin::determineAfterLoginUrl() in this case
				// redirect to parent page
				wire('session')->redirect('../');
			}

			$token = wire('sanitizer')->alphanumeric($this->input->get('token'));

			// has current user already participated in the poll or is already a token in DB assigned to this user?
			$userToken = $this->getTokenByUser($this->id, $userID);

			if (!empty($userToken['used'])) {

				// token exists and is used but IP is not set: DB manipulation
				if (empty($userToken['ip'])) {
					throw new WireException('Database manipulation error. Token is marked as used without an IP address having been assigned.');
				}	

				$return = "<p>" . $this->_('You have already taken part in this poll / election. Multiple participation is not permitted. Your participation has been registered as follows.') . "</p>" . $this->buildTokenTable([$userToken]);
				if ($data['anonymus']) $return .= "<p>" . $this->_('Your opinion or vote was saved anonymously regardless of the participation registration.') . "</p>";
				return $return;
			}

			// invalid token
			if (!$this->isValidToken($token)) {
				$this->renderInvalidRequestWarning();

				// log
				if (!wire('user')->isLoggedin()) $text = "Invalid Request [#$this->id]. Submitted token [$token] does not exist. IP: " . $_SERVER['REMOTE_ADDR'];
				else if (!empty($userToken['token'])) $text = "Invalid Request [#$this->id]. Submitted token [$token] does not exist and does not match token [$userToken[token]] assigned to current user [#$userID]. IP: " . $_SERVER['REMOTE_ADDR'];
				else $text = "Invalid Request [#$this->id]. Submitted token [$token] does not exist. No token assigned to current user [#$userID]. IP: " . $_SERVER['REMOTE_ADDR'];

				wire('log')->save('polls-error', $text);

				return "<p>" . $this->_('The token passed does not exist or is invalid. Multiple participation with the same token is not permitted. Tokens are tied to the logged-in user and are non-transferrable.') . "</p>";
			}

			// very rare but ... token is valid but another unused token is already assigned to this user
			if (!empty($userToken['user_id']) && $token != $userToken['token']) {	

				// delete the valid but wrong token
				$this->deleteTokens($token);
				$this->countInvalidRequests();
				$this->renderInvalidRequestWarning();
				
				// log
				$text = "Invalid Request [#$this->id]. Submitted token [$token] is valid but does not match token [$userToken[token]] assigned to current user [#$userID]. Token [$token] has been deleted. User has been redirected with assigned token. IP: " . $_SERVER['REMOTE_ADDR'];
				wire('log')->save('polls-error', $text);

				// redirect to user assigned token
				$redirect = "./?id=$this->id&token=" . $userToken['token'];
				wire('session')->redirect($redirect);
			}
			
			// token is fine, go on
			$this->form->hiddenFields = ['token' => $token];
		}

		// anonymus poll
		// set createdUser, modifiedUser to guestUser (40)
		if ($data['anonymus']) {
			$this->form->anonymus = true;
			// obfuscate timestamps (created, modified, published)
			// due to the fact a timestamp is set in the token table
			// if ($data['require_token']) $this->form->obfuscateDate = true; // useless
		}

		// check if user already participated in the poll (backend process only)
		else {
			if (wire('config')->admin) {
				$page = wire('pages')->get("created_users_id=$userID,parent=$parent,template=$template,include=all");
				if ($page->id) return $this->form->render($page->id);
			}
		}

		// summary
		if (!empty($data['summary'])) {
			if ($this->wire('languages') && strpos($data['summary'], '{"') === 0) {		
				$langValues = json_decode($data['summary'], true);
				$summary = $langValues[$this->wire('user')->language->id];
			} else $summary = $data['summary']; // something with date start end??
		} else $summary = '';

		if ($summary) wire('page')->body = "<p class='description'>" . $summary . "</p>";
		// otherwise blank form
		return $this->form->render();
	}	

	/**
	 * renders a list of all/ active polls
	 * @see ProcessList::render()
	 * @var $config->ProcessList
	 * @var $config->ProcessPollsList
	 *
	 */
	protected function renderList() {

		$defaults = array(
			'dlClass' => 'nav',
			'dtClass' => '',
			'ddClass' => '',
			'aClass' => 'label',
			'disabledClass' => 'ui-priority-secondary',
			'showIcon' => true, 
		);
		$settings = !empty(wire('config')->ProcessPollsList)? wire('config')->ProcessPollsList : wire('config')->ProcessList;
		if(!is_array($settings)) $settings = array();
		$settings = array_merge($defaults, $settings);
		$out = "\n<dl class='$settings[dlClass]'>";
		$cnt = 0;
		$buttons = '';
		$deleteLabel = $this->_('Delete');
		$exportLabel = $this->_('Export');
		$previewLabel = $this->_('Preview');
		$editLabel = $this->isAdmin? $this->_('Edit') : // new line for translations
					$this->_('Details');
		
		foreach($this->getProcessPage()->children("check_access=0") as $parent) {
			
			// missing in DB
			if (empty($this->polls[$parent->id])) continue;

			$data = $this->polls[$parent->id];

			// check date range
			if ($data['tsEnd'] < time()) {
				if (!$this->isAdmin && !$this->isMonitor) continue;
				$info = sprintf($this->_('This poll / election ended on %s (00:00). Participation is no longer possible. The poll can be exported, evaluated and then deleted.'), $data['dateEnd']);
			}
			else if ($data['tsStart'] > time()) {
				$info = sprintf($this->_('This poll / election has not started yet. Participation is possible from %1$s (00:00) to %2$s (00:00).'), $data['dateStart'], $data['dateEnd']);
			} else {
				$info = sprintf($this->_('This poll / election is active and ends on %s (00:00). Participation is no longer possible after this date.'), $data['dateEnd']);
			}

			if ($this->isMonitor) {
				$numVotes = $parent->children('include=all,template=' . $data['template'])->count();
				$labelVotes = $this->_('Participation / Voter turnout');
				$info .= "<br><strong>$labelVotes:</strong> <span class='uk-badge'>$numVotes</span>";
			}

			if ($data['require_token'] && $this->isAdmin) {
				$numTokens = $this->getNumTokens($parent->id);
				$labelTotal = $this->_('total');
				$labelAssigned = $this->_('assigned');
				$labelUsed = $this->_('used');
				$labelTokens = $this->_('Tokens');
				$labelUsedAssigned = $this->_('assigned & used');
					$info .= "<br><strong>$labelTokens:</strong> <span class='uk-badge'>$numTokens[total]</span> <span class='uk-text-meta'>$labelTotal</span> <span class='uk-badge'>$numTokens[assigned]</span> <span class='uk-text-meta'>$labelAssigned</span> <span class='uk-badge'>$numTokens[used]</span> <span class='uk-text-meta'>$labelUsed</span> <span class='uk-badge'>$numTokens[usedAssigned]</span> <span class='uk-text-meta'>$labelUsedAssigned</span>";
			}
		
			// check access
			$allowedUsers = [];
			$userID = wire('user')->id;
			if (!empty($data['selector'])) {
				$allowedUsers = wire('users')->findIDs($data['selector']);
				if (!$this->isAdmin && !$this->isMonitor && !in_array($userID, $allowedUsers)) continue;
			}
			// hidden for monitors if participation not granted OR poll is over AND hide_in_list checked
			if (!$this->isAdmin && $this->isMonitor && $data['hide_in_list'] && (!in_array($userID, $allowedUsers) || $data['tsEnd'] < time())) continue;
		
			$dtClass = $settings['dtClass'];
			$ddClass = $settings['ddClass'];
			$icon = '';
			
			if($settings['showIcon']) { 
				$icon = $parent->get('page_icon');
				if(!$icon) {
					if ($data['require_token'] && $data['anonymus']) $icon = 'check-square-o';
					else $icon = 'clipboard';
				}
				if($icon) {
					if(strpos($icon, 'fa-') === 0) list(,$icon) = explode('-', 2);
					$icon = "<i class='fa fa-stack fa-fw fa-$icon ui-priority-secondary'></i> ";
				}
			}

			// title
			$title = $data['title'];
			if ($this->wire('languages') && strpos($data['title'], '{"') === 0) {		
				$langValues = json_decode($data['title'], true);
				$title = $langValues[$this->wire('user')->language->id];
				// fallback to default
				if(!strlen($title)) $title = $langValues[$this->wire('languages')->getDefault()->id];
			}
	
			if(!strlen($title)) $title = $this->_('Poll / Election') . " $parent->id";
			
			// summary
			if (!empty($data['summary'])) {
				$summary = $data['summary'];
				if ($this->wire('languages') && strpos($data['summary'], '{"') === 0) {		
					$langValues = json_decode($data['summary'], true);
					$summary = $langValues[$this->wire('user')->language->id];
					// fallback to default
					if(!strlen($summary)) $summary = $langValues[$this->wire('languages')->getDefault()->id];
				}
			} else $summary = '';
					
			$summary = wire('sanitizer')->entities1($summary);
			
			$dtClass = trim($dtClass);
			$ddClass = trim($ddClass);
			
			$url = $this->getProcessPage()->url . "participate/?id=$parent->id";

			if ($data['require_token']) {
				// check if user has already assigned a token, provide same user token to get the right messages after click
				$userToken = $this->getTokenByUser($parent->id, wire('user')->id);		
				if (!empty($userToken['token'])) {
					$url .= '&amp;token=' . $userToken['token'];
				}

				// get unused token or add token generated on-the-fly if user is allowed to participate
				// NOTE: does not work for admin if not allowed by selector
				else if (empty($data['selector']) || (!empty($data['selector']) && in_array($userID, $allowedUsers))) {
					$unusedTokens = $this->getTokens($parent->id, 1, 0, true);
					if (count($unusedTokens)) {
						$token = $unusedTokens[0]['token'];
						$this->assignToken($token);
					}
					else $token = $this->createTokens($parent->id, wire('user')->id)[0];
					$url .= '&amp;token=' . $token;
				}
			}

			// admin buttons
			$buttons = '';
			if ($this->isAdmin || $this->isMonitor) {
				$editUrl = $this->getProcessPage()->url . "./edit/?id=$parent->id";
				$delUrl = $this->getProcessPage()->url . "./delete/?id=$parent->id";
				$exportUrl = $this->getProcessPage()->url . "./export/?id=$parent->id";
				$previewUrl = $this->getProcessPage()->url . "./participate/?id=$parent->id&amp;preview=1";
				$editLink = "<a class='ui-button ui-priority-secondary' href='$editUrl'><i class='fa fa-cogs'></i> $editLabel</a>";
				$previewLink = "<a class='ui-button ui-priority-secondary' href='$previewUrl'><i class='fa fa-eye'></i> $previewLabel</a>";
				$delLink = $this->isAdmin? "<a class='ui-button ui-priority-secondary' href='$delUrl'><i class='fa fa-trash-o'></i> $deleteLabel</a>" : '';
				$exportLink = $this->isAdmin || (wire('user')->hasPermission('export-csv') && $data['tsEnd'] < time())? "<a class='ui-button ui-priority-secondary' href='$exportUrl'><i class='fa fa-share'></i> $exportLabel</a>" : '';
				$buttons = "<p class='poll-admin-links'><small>$editLink$previewLink$delLink$exportLink</small></p>";
			}

			if($summary) $summary = html_entity_decode($summary);
				$out .= "\n\t<dt class='$dtClass'><a class='$settings[aClass]' href='$url'>$title$icon</a></dt>";
			if($summary) $out .= "\n\t<dd class='$ddClass'><p>$summary</p><p>$info</p>$buttons</dd>";
			else if ($buttons) $out .= "\n\t<dd class='$ddClass'>$info$buttons</dd>";
			$cnt++;
		}

		$out .= "\n</dl>";
		if(!$cnt) $out = $this->_('No polls / elections are currently active.');

		// add poll button
		if ($this->isAdmin)  {
			$button = $this->modules->get('InputfieldButton');
			$button->href = './add/';
			$button->class .= ' head_button_clone';
			$button->value = $this->_('Add New');
			if (!$cnt) $out = $buttons;
			$out .= $button->render();
		}
		return $out; 
	}

	protected function buildTokenTable(Array $data, $onlyRows = false) {
		$table = new MarkupAdminDataTable();
		$th1 = $this->_('Token');
		$th2 = $this->_('Used');
		$th3 = $this->_('User');
		$th4 = $this->_('IP');
		$table->set('id', 'AdminDataTokenTable');
		$table->headerRow([$th1, $th2, $th3, $th4]);
		$table->addClass('uk-table uk-table-divider');
		// $table->set('responsive', MarkupAdminDataTable::responsiveAlt);
		$rowString = '';
		foreach ($data as $row) {
			if (!empty($row['used'])) $row['used'] = '&#x2713;';
			if (!empty($row['user_id'])) $row['user_id'] = wire('users')->get('include=all,id=' . $row['user_id'])->name . " (#$row[user_id])";
			$row = array_values($row);
			array_shift($row);
			if ($onlyRows) $rowString .= "<tr><td>" . implode('</td><td>', $row) . "</td></tr>\n";
			else $table->row(array_values($row));
		}
		if ($onlyRows) return $rowString;
		return $table->render();
	}

	protected function buildForm($id = 0) {
		$collapsed = $this->isAdmin? 0 : Inputfield::collapsedNoLocked;
		$data = !empty($this->polls[$id])? $this->polls[$id] : array();

		$defaults = self::defaultData();

		$data = array_merge($defaults, $data);
		$form = $this->modules->get("InputfieldForm");
		$form->name = 'config_process_poll';
		// $form->method = 'post';

		/** @var InputfieldText $f */
		$f = $this->modules->get("InputfieldText");
		$f->value = $data['title'];

		if ($this->wire('languages')) {		
			$f->useLanguages = true;
			if (strpos($data['title'], '{"') === 0) {
				$f->useLanguages = true;
				$langValues = json_decode($data['title']);
				foreach ($langValues as $langId => $langValue) {
					if ($langId == $this->wire('languages')->getDefault()->id) {
						$f->value = $langValue;
					} else {
						$f->{"value$langId"} = $langValue;
					}
				}
			}
		}

		$f->label = $this->_('Title');
		$f->required = true;
		$f->name = 'title';
		$f->columnWidth = 40;
		$f->collapsed = $collapsed;
		$form->add($f);

 		/** @var InputfieldDatetime $f */
		$f = wire('modules')->get('InputfieldDatetime');
		$f->attr('name', 'start');
		$f->attr('value', $data['start']);
		$f->label = __('Start');
		$f->required = true;
		$f->icon = 'calendar';
		$f->columnWidth = 20; 
		$f->datepicker = InputfieldDatetime::datepickerFocus; 
		$f->attr('placeholder', 'yyyy-mm-dd');
		$f->notes = '00:00:00';
		$f->collapsed = $collapsed;
		$form->add($f);
	
		/** @var InputfieldDatetime $f */
		$f = wire('modules')->get('InputfieldDatetime');
		$f->attr('name', 'end');
		$f->attr('value', $data['end']);
		$f->icon = 'calendar';
		$f->label = __('End');
		$f->required = true;
		$f->columnWidth = 20;
		$f->datepicker = InputfieldDatetime::datepickerFocus;
		$f->attr('placeholder', 'yyyy-mm-dd');  
		$f->notes = '00:00:00';
		$f->collapsed = $collapsed;
		$form->add($f);

		/** @var InputfieldSelect $field */
		$f = wire('modules')->get('InputfieldSelect');
		$f->attr('id+name', 'template');
		$f->attr('value', $data['template']);
		$f->required = true;
		$f->columnWidth = 20;
		$f->label = __('Template');
		$f->description = $this->_('Template in which the fields for the poll / election form lives in.');
		$f->icon = 'cubes';

		foreach(wire('templates') as $template) {
			if ($template == 'admin') continue;
			/** @var Template $template */
			// $label = '';
			// if($languages && $language) $label = $template->get('label' . $language->id);
			// if(!$label) $label = $template->label ? $template->label : $template->name;
			$f->addOption($template->id, $template->name);
		}
		$f->collapsed = $collapsed;
		$form->add($f);

		/** @var InputfieldTextarea $f */
		$f = $this->modules->get("InputfieldTextarea");
		$f->label = $this->_('Summary');
		$f->value = $collapsed? strip_tags($data['summary']) : $data['summary'];

		if ($this->wire('languages')) {		
			$f->useLanguages = true;
			if (strpos($data['summary'], '{"') === 0) {
				$langValues = json_decode($data['summary']);
				foreach ($langValues as $langId => $langValue) {
					if ($langId == $this->wire('languages')->getDefault()->id) {
						$f->value = $langValue;
					} else {
						$f->{"value$langId"} = $langValue;
					}
				}
			}
		};

		// $f->required = true;
		$f->maxlength = 1024;
		$f->showCount = 1;
		$f->description = $this->_('Short introduction to the poll / election displayed in the Polls / Elections list.');
		$f->name = 'summary';
		$f->collapsed = $collapsed;
		$form->add($f);

		/** @var InputfieldSelector $f */
		$f = wire('modules')->get('InputfieldSelector');
		$f->attr('id+name', 'selector'); 
		$f->label = $this->_('Users who are allowed to participate in this poll / election');
		$f->set('addLabel', $this->_('Add Filter'));
		$f->initValue = 'template=user';

		$f->previewColumns = array('id','name');
		// limit
		// $f->limitFields = array();
		// exclude
		// $f->exclude = array();

		$f->showFieldLabels = 2; // 0: show names (default), 1: show labels, 2: show both (label [name])
		$f->allowSubselectors = true;
		$f->allowSubfields = true;
		$f->allowSystemCustomFields = true; 
		$f->allowSystemTemplates = true;
		// $f->optgroupsOrder = 'system,field,subfield,modifier';
		$f->attr('value', $data['selector']);
		$f->collapsed = $collapsed;
		$f->columnWidth = 80;
		$form->add($f);

		if ($this->isAdmin) {
			$f = wire('modules')->get('InputfieldCheckbox');
			$f->attr('id+name', 'hide_in_list');
			$f->attr('value', 1);
			$f->attr('checked', $data['anonymus'] ? 'checked' : '');
			$f->label = $this->_('Hide for Monitors');
			$f->description = sprintf($this->_('Hide this poll / election in the list for users with role %1$s if participation is not granted.'), "`poll-monitor`");
			$f->columnWidth = 20;
			$form->add($f);
		}

		// conditions of participation
		$f = wire('modules')->get('InputfieldPageListSelect');
		// $f->set('parent_id', 1);
		$f->attr('id+name', 'cop_id'); 
		$f->value = !empty($data['cop_id'])? (int) $data['cop_id'] : 0;
		$f->label = $this->_('Page holding the conditions of participation');
		$f->description = $this->_('Select a page with the conditions of participation valid for this poll / election. If a page is selected here, each participant in the poll must confirm these conditions in order to be able to take part in the poll.');
		$f->notes = $this->_('A confirmation checkbox is provided only for Polls / elections in the ProcessWire backend.');
		$f->columnWidth = 100;
		$f->collapsed = $collapsed;
		$f->required = false;
		$form->add($f);

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('id+name', 'anonymus');
		$f->attr('value', 1);
		$f->attr('checked', $data['anonymus'] ? 'checked' : '');
		$f->label = $this->_('Anonymus Poll');
		$f->description = $this->_('Force the **createdUser** and **modifiedUser** of the page that stores the data (vote) submitted by the participant to always be the guest user, regardless of whether the participant is logged in or not.');
		$f->columnWidth = 33;
		$f->collapsed = $collapsed;
		$form->add($f);

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('id+name', 'require_token');
		$f->attr('value', 1);
		$f->attr('checked', $data['require_token'] ? 'checked' : '');
		$f->label = $this->_('Requires Token');
		$f->description = sprintf($this->_('Data records (votes) are only saved if a valid one-time token has been transferred as a get or post variable. After %1$s attempts to transfer an invalid token, the corresponding IP address is blocked for 24 hours.'), self::MAX_INVALID_ATTEMPTS);
		$f->notes = $this->_('Prevents multiple participation in anonymous or frontend based polls.');
		$f->columnWidth = 34;
		$f->collapsed = $collapsed;
		$form->add($f);

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('id+name', 'show_pvc');
		$f->attr('value', 1);
		$f->attr('checked', $data['show_pvc'] ? 'checked' : '');
		$f->label = $this->_('Show PVC');
		$f->description = $this->_('After submitting the opinion / vote, a **PVC** *(Poll Verification Code)* may be displayed to the participant. This verification code is not stored in the database or in a log file. However, it allows the participant to verify his opinion / vote later in the results list.');
		$f->notes = $this->_('Only if poll /election is anonymous and token based.');
		$f->columnWidth = 33;
		$f->collapsed = $collapsed;
		if (!$collapsed) $f->showIf = 'require_token=1,anonymus=1';
		$form->add($f);

		if ($this->isAdmin && $id) {
			$form->action = "./?id=$id";
			$f = wire('modules')->get('InputfieldMarkup');
			$f->label = $this->_('Tokens');
			if ($this->isAdmin) $f->showIf = "require_token=1";

			$tokens = $this->getTokens($id, self::MAX_NUM_TOKEN);
			$f->markupText = $this->buildTokenTable($tokens);

			$numTokens = $this->getNumTokens($id);
			if ($numTokens['total'] > self::MAX_NUM_TOKEN) {
				$ajaxButton = wire('modules')->get('InputfieldButton');
				$ajaxButton->attr('value', $this->_('Load more ...')); 
				$ajaxButton->attr('data-total', $numTokens['total']);
				$ajaxButton->attr('data-limit', self::MAX_NUM_TOKEN);
				$ajaxButton->attr('data-offset', self::MAX_NUM_TOKEN);
				$ajaxButton->attr('data-href', "../tokens/?id=$id");
				$ajaxButton->attr('class', 'uk-button ui-corner-all uk-button-default');
				$ajaxButton->attr('id', 'ajaxTokenLoader'); 
				$f->markupText .= $ajaxButton->render();// add button to add rows via ajax
			}
			$form->add($f);
		}

		if ($this->isAdmin) {

			/** @var InputfieldSubmit $f */
			$f = wire('modules')->get("InputfieldSubmit");
			$f->skipLabel = Inputfield::skipLabelHeader;
			$f->class .= ' head_button_clone';
			$f->value = 'Save';
			$f->name = 'save_poll';
			$form->add($f);

			if ($id) {		
				$f = wire('modules')->get('InputfieldButton');
				$f->value = $this->_('Create Tokens');
				$f->class .= ' ui-priority-secondary';
				// $f->aclass = 'ignore-active-tab'; // wrapper
				$f->href = "./?id=$id&createTokens=5";
				$f->showIf = "require_token=1";
				$f->attr('id+name','create_tokens');
				$form->add($f);

				$f = wire('modules')->get('InputfieldButton');
				$f->notes = $this->_('Delete all opinions / votes and all tokens either used or not for this poll.');
				$f->value = $this->_('Reset Poll');
				$f->class .= ' ui-priority-secondary';
				$f->href = "./?id=$id&resetPoll=1";
				$f->showInHeader();
				$f->attr('id+name','reset_poll');
				$form->add($f);

				// add button to create and render tokens related to this poll ??
				// add button to create and render links with tokens related to this poll b(backend/ frontend)??
				// + field for base URL? poll id and token automatically added?
				// textarea for email addresses generate emails with links and valid tokens sen via WireMail ??
			}
		}

		return $form;
	}

	/**
	 * Check if $token is present in DB and not already used
	 * @param string $token
	 * @return bool|int
	 * returns user_id if assigned, true if valid
	 * 
	 */
	private function isValidToken($token, $countInvalidRequests = true) {	
		$data = $this->getDataArray("SELECT used, user_id, INET6_NTOA(UNHEX(ip)) FROM process_poll_token WHERE token='$token' AND pages_id='$this->id' LIMIT 1;");

		// token exists not used but IP is set: DB manipulation
		if (!empty($data[0]) && empty($data[0]['used']) && !empty($data[0]['ip'])) {
			throw new WireException('Database manipulation error. Token is marked as unused with an IP address having been assigned.');
		}

		// token exists and has not been used yet
		if (!empty($data[0]) && empty($data[0]['used'])) {		
			if (!empty($data[0]['user_id'])) return $data[0]['user_id'];
			return true;
		}
		if ($countInvalidRequests === false) return false;
		if (!$this->countInvalidRequests()) throw new WireException('The number of unauthorized requests (usage of invalid token) has been exceeded.');
		return false;
	}

	/**
	 * get token details used by user
	 * @param int $poll page id of poll
	 * @param int $user user id
	 * @return bool|array
	 *
	 */
	private function getTokenByUser($poll, $user) {
		$data = $this->getDataArray("SELECT pages_id, token, used, user_id, INET6_NTOA(UNHEX(ip)) FROM process_poll_token WHERE user_id='$user' AND pages_id='$poll' LIMIT 1;");
		if (empty($data[0])) return false;
		return $data[0];
	}

	/**
	 * Remove token/s from DB
	 * @param string|bool $token
	 * @return bool
	 *
	 */
	private function deleteTokens($token) {
		if ($token === true && $this->id) {
			$sql = "DELETE FROM process_poll_token WHERE pages_id=:id;";
			$sth = wire('database')->prepare($sql);
			$sth->bindValue(":id", $this->id); 
		} else {
			$sql = "DELETE FROM process_poll_token WHERE token=:delete LIMIT 1;";
			$sth = wire('database')->prepare($sql);
			$sth->bindValue(":delete", $token);
		}
		$result = $sth->execute();
		if ($result) return true;
		$this->error(wire('database')->errorInfo(), Notice::logOnly); // log on failure?
		return false;
	}

	/**
	 * Invalidate a token, set used, user_id, IP-Adress
	 * function ignores
	 * 
	 * @param string $token
	 * @return bool
	 *
	 */
	private function invalidateToken($token) {
		$sql = "UPDATE process_poll_token SET used=1, user_id=:user_id, ip=HEX(INET6_ATON(:ip)) WHERE token=:token AND (ip IS NULL OR ip='' OR used IS NULL) AND (user_id IS NULL OR user_id=:user_id) LIMIT 1;";
		$sth = wire('database')->prepare($sql);
		$sth->bindValue(":ip", wire('session')->getIP());
		$sth->bindValue(":user_id", wire('user')->id);
		$sth->bindValue(":token", $token); 
		$result = $sth->execute();
		if ($result) return true;
		$this->error(wire('database')->errorInfo(), Notice::logOnly); // log on failure?
		return false;
	}

	/**
	 * Assign an unused token to current user
	 * @param string $token
	 * @return bool
	 *
	 */
	private function assignToken($token) {
		if (!wire('user')->isLoggedin()) return false;
		$sql = "UPDATE process_poll_token SET user_id=:user_id WHERE token=:token AND used IS NULL AND user_id IS NULL AND (ip IS NULL OR ip='') LIMIT 1;";
		$sth = wire('database')->prepare($sql);
		$sth->bindValue(":user_id", wire('user')->id);
		$sth->bindValue(":token", $token); 
		$result = $sth->execute();
		if ($result) return true;
		$this->error(wire('database')->errorInfo(), Notice::logOnly); // log on failure?
		return false;
	}

	/**
	 * create one ore more tokens related to a specific poll
	 * @param string $poll (page ID)
	 * @param int $user
	 * @param string $num
	 * @return bool|array tokens
	 * 
	 */
	private function createTokens($poll, $user = null, $num = 1) {
		$random = new WireRandom();
		$tokens = [];
		$values = [];
		$result = null;
		$i = 0;
		while ($i < $num) {
			$token = $random->alphanumeric(self::TOKEN_LENGTH);
			// check for duplicates
			if ($this->isValidToken($token, false)) continue;
			$values[] = $user? "('$poll', '$token', $user)" : "('$poll', '$token')";
			$tokens[] = $token;
			$i++;
		}
		$values  = implode(", ", $values);
		$columns = $user? "(pages_id, token, user_id)" : "(pages_id, token)";
		$sql = "INSERT INTO process_poll_token $columns VALUES $values;";
		$sth = wire('database')->prepare($sql);
		$result = $sth->execute();
		if ($result) return $tokens;
		$this->error(wire('database')->errorInfo(), Notice::logOnly); // log on failure?
		return false; 
	}

	/**
	 * get tokens related to specific poll
	 * @param int $poll (page ID)
	 * @param int $limit
	 * @param int $offset
	 * @param bool $unused
	 * @return array of tokens
	 * 
	 */
	private function getTokens($poll, $limit = self::MAX_NUM_TOKEN, $offset = 0, $unused = false) {
		$filter = $unused? " AND used IS NULL AND user_id IS NULL AND (ip IS NULL OR ip='')" : '';
		$sql = "SELECT pages_id, token, used, user_id, INET6_NTOA(UNHEX(ip)) FROM process_poll_token WHERE pages_id=$poll$filter LIMIT $offset, $limit;";
		return $this->getDataArray($sql);
	}

	/**
	 * count tokens in DB
	 * @param int $poll (page ID)
	 * @return array (assoc) with number of tokens ['total' => 0, 'used' => 0, 'assigned' => 0, 'usedAssigned' => 0]
	 * 
	 */
	protected function getNumTokens($poll) {
		$sql = "SELECT
			COUNT(*) AS `total`,
			SUM(CASE WHEN process_poll_token.used = 1 THEN 1 ELSE 0 END) AS used,
			SUM(CASE WHEN process_poll_token.user_id != '' THEN 1 ELSE 0 END) AS assigned,
			SUM(CASE WHEN process_poll_token.user_id != '' AND process_poll_token.used = 1 THEN 1 ELSE 0 END) AS usedAssigned
			FROM process_poll_token WHERE pages_id=$poll;";
		$result = $this->getDataArray($sql)[0];
		foreach ($result as $key => &$val) {
			$val = empty($val)? 0 : $val;
		}
		return $result;
	}

	/**
	 * count invalid token based requests
	 * cache expires daily
	 * invalid requests possible @see self::MAX_INVALID_ATTEMPTS
	 * @param getNum bool get only the number of invalid requests, without counting up
	 * @return bool|int
	 * 
	 */
	private function countInvalidRequests($getNum = false) {
		if (empty($_SERVER['REMOTE_ADDR'])) return false;
		$ip = crypt($_SERVER['REMOTE_ADDR'], 12);
		$cache = wire('cache');
		$cache->maintenance(); // remove expired caches
		$count = $cache->get("ProcessPolls_CIR_$ip", time() - WireCache::expireDaily);
		if (empty($count)) $count = 0;
		if ($count >= self::MAX_INVALID_ATTEMPTS) return false;
		if ($getNum) return $count;
		$count++;	
		$cache->save("ProcessPolls_CIR_$ip", $count, WireCache::expireDaily);
		return true;
	}

	/**
	 * create warning for invalid requests
	 * 
	 */
	private function renderInvalidRequestWarning() {
		$invalidRequests = $this->countInvalidRequests(true)? $this->countInvalidRequests(true) : self::MAX_INVALID_ATTEMPTS;
		$invalidRequestNotice = sprintf($this->_('%d/%d requests with invalid token'), $invalidRequests, self::MAX_INVALID_ATTEMPTS);
		$this->warning($invalidRequestNotice);
	}

	/**
	 * Get data Array 
	 * @param sql query string
	 * @param string array key of each result array
	 * @return array
	 *
	 */
	private function getDataArray($sql, $key = null) {
		$sth = wire('database')->prepare($sql);
		if (!$sth) $error =  "PDO: ";
		else if (!$sth->execute()) $error = "PDOStatement: ";

		$data = [];
		if ($sth->rowCount()) {
			$count = 0;
			while ($res = $sth->fetch(\PDO::FETCH_ASSOC)) {
				if ($key && !empty($res[$key])) $_key = $res[$key];
				else $_key = $count;
				$data[$_key] = array();
				foreach($res as $dataKey => $dataValue) {
					if ($dataKey == 'INET6_NTOA(UNHEX(ip))') $dataKey = 'ip';
					$data[$_key][$dataKey] = $dataValue;
				}
				$count++;
			}
		}
		if(!empty($error)) {
			$errorInfo = $sth->errorInfo();
			throw new WireException($error."[$errorInfo[0]] $errorInfo[2]");
			return false;
		}
		return array_filter($data);
	}

	/**
	 * Return the page that this Process is installed on or create a new page 
	 *
	 */
	public function getProcessPage() {
		// $page = parent::getProcessPage(); // does not work if bootstrapped

		$page = wire('page'); 
		if($page && $page->process === $this) return $page;
		$moduleID = wire('modules')->getModuleID($this);
		if($moduleID) $page = wire('pages')->get("process=$moduleID,include=all"); 

		if(!$page->id) {
			$page = new Page();
			$page->parent = wire('pages')->get(wire('config')->adminRootPageID);
			$page->template = 'admin';
			$page->name = 'process_poll';
			if (wire('modules')->isInstalled('LanguageSupportFields') && wire('user')->language->isDefault() == false) {
				$page->setLanguageValue(wire('languages')->getDefault(), 'title', $page->title);			
			} else $page->title = 'Polls & Elections';
			$page->process = $this;
			$page->save();
		}
		return $page;
	}

	/**
	 * add a new child page (poll data container) to the process page
	 * @return int - page id
	 *
	 */
	protected function addPollPage() {
		$page = new Page();
		$page->template = 'admin';
		$page->parent = $this->getProcessPage();
		$page->save();
		$page->setAndSave('name', "poll-$page->id");
		return $page->id;
	}

	/**
	 * Process input save settings to DB
	 * @param $form object InputfieldForm
	 * @return object $form
	 *
	 */
	private function save($form = null, $update = false) {
		$database = wire('database');
		$userID = wire('user')->id;
		$id = (int) wire('input')->get->id;

		if($id && !$form) {
			$sql = "DELETE p, t FROM process_poll p LEFT JOIN process_poll_token t ON p.pages_id=t.pages_id WHERE p.pages_id=:delete;";
			$query = $database->prepare($sql);
			$query->bindValue(":delete", $id); 
			$result = $query->execute();
			if ($result) {
				$cache = wire('cache');
				$cache->delete("ProcessPolls_CIR_$id");
				$this->message(sprintf($this->_('Successfully deleted poll-%s'), $id));
				$page = wire('pages')->get($id);
				if ($page->id) $page->delete(true);
				return $form;
			} else {
				throw new WireException($database->errorInfo());
			}
		} else {
			$form->processInput($this->input->post);
			$errors = $form->getErrors();
			if(count($errors)) return $form;

			if ($update) {
				$message = 'updated';
				$sql = "UPDATE";
			}
			else {
				$sql = "INSERT INTO";
				$message = 'added';
				$id = $this->addPollPage();
			}

			$sql .= " `process_poll` SET start=:start, end=:end, require_token=:require_token, anonymus=:anonymus, show_pvc=:show_pvc, template=:template, title=:title, summary=:summary, selector=:selector, hide_in_list=:hide_in_list, cop_id=:cop_id, modified_users_id=:modified_users_id";
			$sql .= $update? ', modified=:modified WHERE ' : ', created_users_id=:created_users_id, ';
			$sql .= "pages_id=:pages_id;";
			// if (empty($this->input->post->require_token)) $sql .= "DELETE FROM process_poll_token WHERE pages_id=:pages_id;";

			$query = $database->prepare($sql);

			$query->bindValue(':pages_id', $id);
			if (!$update) $query->bindValue(':created_users_id', $userID);
			else $query->bindValue(':modified', date('Y-m-d H:i:s'));
			$query->bindValue(':modified_users_id', $userID);

			$data = self::defaultData();
			$show_pvc = 0;

			$titleLang = [];
			$summaryLang = [];
			$defaultLangId = $this->wire('languages')->getDefault()->id;

			foreach ($data as $name => $value) {
				if (in_array($name, ['require_token','anonymus','show_pvc']) && $this->input->post->$name) $show_pvc++;
				// language value and multi language enabled?
				if(in_array($name, ['title','summary']) && $this->wire('languages')) {
					foreach ($this->wire('languages') as $lang) {
						if ($lang->isDefault() && $this->input->post->$name) {
							$langValue = $this->input->post->$name;
						}
						else if ($this->input->post->{"{$name}__$lang->id"}) {
							$langValue = $this->input->post->{"{$name}__$lang->id"};
						}
						else $langValue = $value;
						${"{$name}Lang"}[$lang->id] = $langValue;
					}
					$query->bindValue(":$name", json_encode(${"{$name}Lang"}));
					continue;
				}
				// other stuff
				if ($this->input->post->$name) $query->bindValue(":$name", $this->input->post->$name);
				else $query->bindValue(":$name", $value);
			}
			if ($show_pvc === 3) $query->bindValue(":show_pvc", 1);
			else $query->bindValue(":show_pvc", 0);

			$result = $query->execute();
			if ($result) {
				$this->message(sprintf($this->_('Successfully %1$s poll-%2$s'), $message, $id));
				return $form;
			} else {
				throw new WireException($database->errorInfo());
			}
		}
		$this->error($this->_("Error form processing"));
		return $form;
	}

	protected static function defaultData() {
		return array(
			'template' => null,
			'start' => null,
			'end' => null,
			'require_token' => 0,
			'anonymus' => 0,
			'show_pvc' => 0,
			'title' => '',
			'summary' => '',
			'selector' => '',
			'cop_id' => 0,
			'hide_in_list' => 0
		);
	}

	public function ___install() {
		$page = $this->getProcessPage();
		$this->message(sprintf($this->_('Installed to %s'), $page->path));
		$engine = wire('config')->dbEngine;

		$sql = <<< _END
		CREATE TABLE process_poll (
			`pages_id` int UNSIGNED NOT NULL COMMENT 'Parent page (Poll) of all submitted data sets.',
			`template` int UNSIGNED NOT NULL,
			`start` TIMESTAMP NOT NULL,
			`end` TIMESTAMP NOT NULL,
			`require_token` tinyint NOT NULL,
			`anonymus` tinyint NOT NULL,
			`show_pvc` tinyint NOT NULL,
			`title` text NOT NULL,
			`summary` mediumtext NOT NULL,
			`selector` text NOT NULL,
			`hide_in_list` tinyint NOT NULL COMMENT 'Hidden in list for users with role poll-monitor',
			`cop_id` int UNSIGNED NOT NULL COMMENT 'Page holding conditions of participation.',
			`created` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			`modified` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
			`created_users_id` int UNSIGNED NOT NULL,
			`modified_users_id` int UNSIGNED NOT NULL,
			PRIMARY KEY (`pages_id`)
		) ENGINE=$engine DEFAULT CHARSET=utf8;
		CREATE TABLE process_poll_token (
			`pages_id` int UNSIGNED NOT NULL COMMENT 'Related poll page',
			`token` varchar(32) NOT NULL,
			`used` BIT(1),
			`user_id` int UNSIGNED COMMENT 'Used by user with ID',
			`ip` VARBINARY(16),
			PRIMARY KEY (`token`),
			UNIQUE (`pages_id`, `user_id`)
		) ENGINE=$engine DEFAULT CHARSET=ascii;
_END;
		$this->database->query($sql);
	}

	public function ___uninstall() {
		$cache = wire('cache');
		$cache->delete("ProcessPolls_CIR_*");
		$moduleID = wire('modules')->getModuleID($this);
		$pages = wire('pages')->find("template=admin,process=$moduleID,include=all");
		foreach ($pages as $page) $page->delete(true);
		$this->database->query("DROP TABLE IF EXISTS process_poll;DROP TABLE IF EXISTS process_poll_token;");
	}
}